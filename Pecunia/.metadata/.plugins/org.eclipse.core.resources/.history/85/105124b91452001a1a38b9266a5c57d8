package com.capgemini.pecunia.DAO;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.capgemini.pecunia.DTO.Account;
import com.capgemini.pecunia.DTO.Transaction;
import com.capgemini.pecunia.exceptions.AccountNumberValidation;
import com.capgemini.pecunia.util.AccountListRepository;
import com.capgemini.pecunia.util.TransactionRepository;

public class PassbookMaintenanceDaoImpl implements PassbookMaintenanceDao 
{	
	
	AccountListRepository accountObj=new AccountListRepository();
	TransactionRepository transactionObj=new TransactionRepository(); 

	List<Transaction>  transaction=transactionObj.getTransaction();
	LocalDateTime now = LocalDateTime.now(); ;
	DateTimeFormatter formatter =DateTimeFormatter.ofPattern("yyyy-MM-dd");
	
	
	public boolean accountValidation(String accountNumber) throws AccountNumberValidation
	{
		
		Map<Long,Account> accounts=accountObj.getAccounts();
		long accountId;
		
		if(accountNumber.length()!=11) 
		{
			throw new AccountNumberValidation("Invalid account Number");
		}
		
		try 
		{
			accountId=Long.parseLong(accountNumber);
		}
		catch(NumberFormatException e) 
		{
			throw new AccountNumberValidation("Invalid account Number");
		}
		
		if(accounts.containsKey(accountId)) 
		{
		
			System.out.println("A/C Number\t"+"A/C HolderName"+"AvailableBalance");
			System.out.println(accountId+"		"+accounts.get(accountId).getAccountHolderName()+"		"+accounts.get(accountId).getAccountBalance()+"\n");
			return true;
		}
		else 
		{
			return false;
		}
	}
	
	
	
	public List<Transaction> transactions(String accountID) 
	{
		long accountNumber=Long.parseLong(accountID);
		List<Transaction> transactionList=new ArrayList<Transaction>();
		
		for(Transaction x: transaction) 
		{
			if(x.getAccountNumber()==accountNumber) 
			{
				transactionList.add(x);
			}
		}
		return transactionList;
		
	}

	
	public List<Transaction> updatePassbook(String accountNumber) 
	{
		List<Transaction> listOfTran=transactions(accountNumber);
		return listOfTran;
	}

	
	public List<Transaction> accountSummary(String accountNumber, LocalDate fDate, LocalDate lDate) throws AccountNumberValidation
	{
		if(lDate.isAfter(LocalDate.parse(formatter.format(now), formatter))) 
		{
			throw new AccountNumberValidation("End Date Must be before the current date");
		}
		if(fDate.isAfter(lDate)) 
		{
			throw new AccountNumberValidation("Starting Date should be less than the end Date");
		}
		List<Transaction> listOfTran=transactions(accountNumber);
		List<Transaction> dateOfTran=new ArrayList<Transaction>();
		
		
		for(Transaction x: listOfTran) 
		{
			
			if( x.getDate().compareTo(fDate)>0 && x.getDate().compareTo(lDate)<0)
			{
				dateOfTran.add(x);
			}
			
		}
		return dateOfTran;
	}


	
}
